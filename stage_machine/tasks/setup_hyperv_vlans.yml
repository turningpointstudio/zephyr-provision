---
# Hyper-V VLAN Configuration Tasks for Host OS Access
# This creates Hyper-V virtual switches with VLAN interfaces for accessing trunked VLANs

- name: Check if Hyper-V is installed
  win_shell: |
    $hypervFeature = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -ErrorAction SilentlyContinue
    if ($hypervFeature -and $hypervFeature.State -eq "Enabled") {
      Write-Host "Hyper-V is already installed and enabled"
      exit 0
    } else {
      Write-Host "Hyper-V is not installed or not enabled"
      exit 1
    }
  register: hyperv_check_result
  failed_when: false

- name: Enable Hyper-V feature if not installed
  win_shell: |
    Write-Host "Enabling Hyper-V feature..."
    Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -All -NoRestart
    Write-Host "Hyper-V feature enabled successfully"
  when: hyperv_check_result.rc != 0
  register: hyperv_install_result

- name: Restart computer if Hyper-V was just installed
  win_reboot:
    msg: "Rebooting to complete Hyper-V installation"
    reboot_timeout: 600
  when: hyperv_install_result is defined and hyperv_install_result.changed

- name: Wait for system to come back online after Hyper-V install
  wait_for_connection:
    timeout: 300
  when: hyperv_install_result is defined and hyperv_install_result.changed

- name: Create Hyper-V External Virtual Switch
  win_shell: |
    $switchName = "{{ hyperv_external_switch_name | default('External Switch') }}"
    $adapterName = "{{ hyperv_physical_adapter }}"
    
    # Check if switch already exists
    $existingSwitch = Get-VMSwitch -Name $switchName -ErrorAction SilentlyContinue
    
    if (-not $existingSwitch) {
      Write-Host "Creating Hyper-V External Virtual Switch: $switchName"
      New-VMSwitch -Name $switchName -NetAdapterName $adapterName -AllowManagementOS $true
      Write-Host "Virtual Switch created successfully"
    } else {
      Write-Host "Virtual Switch $switchName already exists"
    }
  when: hyperv_physical_adapter is defined

- name: Create VLAN interfaces for host OS access
  win_shell: |
    $switchName = "{{ hyperv_external_switch_name | default('External Switch') }}"
    
    Write-Host "Creating VLAN interfaces for host OS access on switch: $switchName"
    
    # Create VLAN 10 interface
    $vlanId = 10
    $vlanName = "VLAN-10"
    Write-Host "Creating VLAN interface: $vlanName (VLAN ID: $vlanId)"
    
    $adapterName = "vEthernet ($vlanName)"
    $existingAdapter = Get-NetAdapter -Name $adapterName -ErrorAction SilentlyContinue
    
    if (-not $existingAdapter) {
      Add-VMNetworkAdapter -SwitchName $switchName -Name $vlanName -ManagementOS
      Write-Host "  ✓ Virtual network adapter created: $vlanName"
    } else {
      Write-Host "  ! Virtual network adapter already exists: $vlanName"
    }
    
    Set-VMNetworkAdapterVlan -ManagementOS -VMNetworkAdapterName $vlanName -Access -VlanId $vlanId
    Write-Host "  ✓ VLAN $vlanId configured for $vlanName"
    
    # Create VLAN 20 interface
    $vlanId = 20
    $vlanName = "VLAN-20"
    Write-Host "Creating VLAN interface: $vlanName (VLAN ID: $vlanId)"
    
    $adapterName = "vEthernet ($vlanName)"
    $existingAdapter = Get-NetAdapter -Name $adapterName -ErrorAction SilentlyContinue
    
    if (-not $existingAdapter) {
      Add-VMNetworkAdapter -SwitchName $switchName -Name $vlanName -ManagementOS
      Write-Host "  ✓ Virtual network adapter created: $vlanName"
    } else {
      Write-Host "  ! Virtual network adapter already exists: $vlanName"
    }
    
    Set-VMNetworkAdapterVlan -ManagementOS -VMNetworkAdapterName $vlanName -Access -VlanId $vlanId
    Write-Host "  ✓ VLAN $vlanId configured for $vlanName"
    
    # Create VLAN 30 interface
    $vlanId = 30
    $vlanName = "VLAN-30"
    Write-Host "Creating VLAN interface: $vlanName (VLAN ID: $vlanId)"
    
    $adapterName = "vEthernet ($vlanName)"
    $existingAdapter = Get-NetAdapter -Name $adapterName -ErrorAction SilentlyContinue
    
    if (-not $existingAdapter) {
      Add-VMNetworkAdapter -SwitchName $switchName -Name $vlanName -ManagementOS
      Write-Host "  ✓ Virtual network adapter created: $vlanName"
    } else {
      Write-Host "  ! Virtual network adapter already exists: $vlanName"
    }
    
    Set-VMNetworkAdapterVlan -ManagementOS -VMNetworkAdapterName $vlanName -Access -VlanId $vlanId
    Write-Host "  ✓ VLAN $vlanId configured for $vlanName"
    
    Write-Host "VLAN interface creation completed"

- name: Configure IP addresses for VLAN interfaces
  win_shell: |
    Write-Host "Configuring IP addresses for VLAN interfaces"
    
    # Configure VLAN 10
    $adapterName = "vEthernet (VLAN-10)"
    $vlanInterface = Get-NetAdapter -Name $adapterName -ErrorAction SilentlyContinue
    
    if ($vlanInterface) {
      Write-Host "Configuring IP for VLAN interface: $adapterName"
      Write-Host "  Found VLAN interface: $adapterName"
      
      # Remove existing IP configuration
      Remove-NetIPAddress -InterfaceAlias $adapterName -Confirm:$false -ErrorAction SilentlyContinue
      
      # Add new IP address
      New-NetIPAddress -InterfaceAlias $adapterName -IPAddress "192.168.10.100" -PrefixLength 24 -ErrorAction SilentlyContinue
      Write-Host "  ✓ IP Address: 192.168.10.100/24"
      
      # Configure gateway
      Remove-NetRoute -InterfaceAlias $adapterName -Confirm:$false -ErrorAction SilentlyContinue
      New-NetRoute -InterfaceAlias $adapterName -DestinationPrefix "0.0.0.0/0" -NextHop "192.168.10.1" -ErrorAction SilentlyContinue
      Write-Host "  ✓ Gateway: 192.168.10.1"
      
      # Configure DNS servers
      Set-DnsClientServerAddress -InterfaceAlias $adapterName -ServerAddresses @("8.8.8.8", "8.8.4.4")
      Write-Host "  ✓ DNS Servers: 8.8.8.8, 8.8.4.4"
    } else {
      Write-Warning "  ! VLAN interface $adapterName not found"
    }
    
    # Configure VLAN 20
    $adapterName = "vEthernet (VLAN-20)"
    $vlanInterface = Get-NetAdapter -Name $adapterName -ErrorAction SilentlyContinue
    
    if ($vlanInterface) {
      Write-Host "Configuring IP for VLAN interface: $adapterName"
      Write-Host "  Found VLAN interface: $adapterName"
      
      # Remove existing IP configuration
      Remove-NetIPAddress -InterfaceAlias $adapterName -Confirm:$false -ErrorAction SilentlyContinue
      
      # Add new IP address
      New-NetIPAddress -InterfaceAlias $adapterName -IPAddress "192.168.20.100" -PrefixLength 24 -ErrorAction SilentlyContinue
      Write-Host "  ✓ IP Address: 192.168.20.100/24"
      
      # Configure gateway
      Remove-NetRoute -InterfaceAlias $adapterName -Confirm:$false -ErrorAction SilentlyContinue
      New-NetRoute -InterfaceAlias $adapterName -DestinationPrefix "0.0.0.0/0" -NextHop "192.168.20.1" -ErrorAction SilentlyContinue
      Write-Host "  ✓ Gateway: 192.168.20.1"
      
      # Configure DNS servers
      Set-DnsClientServerAddress -InterfaceAlias $adapterName -ServerAddresses @("8.8.8.8", "8.8.4.4")
      Write-Host "  ✓ DNS Servers: 8.8.8.8, 8.8.4.4"
    } else {
      Write-Warning "  ! VLAN interface $adapterName not found"
    }
    
    # Configure VLAN 30
    $adapterName = "vEthernet (VLAN-30)"
    $vlanInterface = Get-NetAdapter -Name $adapterName -ErrorAction SilentlyContinue
    
    if ($vlanInterface) {
      Write-Host "Configuring IP for VLAN interface: $adapterName"
      Write-Host "  Found VLAN interface: $adapterName"
      
      # Remove existing IP configuration
      Remove-NetIPAddress -InterfaceAlias $adapterName -Confirm:$false -ErrorAction SilentlyContinue
      
      # Add new IP address
      New-NetIPAddress -InterfaceAlias $adapterName -IPAddress "192.168.30.100" -PrefixLength 24 -ErrorAction SilentlyContinue
      Write-Host "  ✓ IP Address: 192.168.30.100/24"
      
      # Configure gateway
      Remove-NetRoute -InterfaceAlias $adapterName -Confirm:$false -ErrorAction SilentlyContinue
      New-NetRoute -InterfaceAlias $adapterName -DestinationPrefix "0.0.0.0/0" -NextHop "192.168.30.1" -ErrorAction SilentlyContinue
      Write-Host "  ✓ Gateway: 192.168.30.1"
      
      # Configure DNS servers
      Set-DnsClientServerAddress -InterfaceAlias $adapterName -ServerAddresses @("8.8.8.8", "8.8.4.4")
      Write-Host "  ✓ DNS Servers: 8.8.8.8, 8.8.4.4"
    } else {
      Write-Warning "  ! VLAN interface $adapterName not found"
    }
    
    Write-Host "VLAN interface IP configuration completed"

- name: Display Hyper-V VLAN Configuration Summary
  win_shell: |
    Write-Host "=== Hyper-V VLAN Configuration Summary ===" -ForegroundColor Green
    
    Write-Host "`nPhysical Adapter:" -ForegroundColor Yellow
    $physicalAdapter = Get-NetAdapter -Name "{{ hyperv_physical_adapter }}" -ErrorAction SilentlyContinue
    if ($physicalAdapter) {
      Write-Host "  - $($physicalAdapter.Name): $($physicalAdapter.InterfaceDescription)" -ForegroundColor Cyan
      Write-Host "    Status: $($physicalAdapter.Status)" -ForegroundColor Cyan
    }
    
    Write-Host "`nVirtual Switches:" -ForegroundColor Yellow
    Get-VMSwitch | ForEach-Object {
      Write-Host "  - $($_.Name) ($($_.SwitchType))" -ForegroundColor Cyan
    }
    
    Write-Host "`nManagement OS VLAN Configuration:" -ForegroundColor Yellow
    Get-VMNetworkAdapter -ManagementOS | ForEach-Object {
      $vlanConfig = Get-VMNetworkAdapterVlan -ManagementOS -VMNetworkAdapterName $_.Name
      if ($vlanConfig) {
        Write-Host "  - $($_.Name): VLAN $($vlanConfig.VlanId)" -ForegroundColor Cyan
      } else {
        Write-Host "  - $($_.Name): No VLAN configured" -ForegroundColor Gray
      }
    }
    
    Write-Host "`nVLAN Network Interfaces:" -ForegroundColor Yellow
    $vlanInterfaces = Get-NetAdapter | Where-Object { $_.Name -like "vEthernet*" }
    foreach ($interface in $vlanInterfaces) {
      Write-Host "  - $($interface.Name): $($interface.InterfaceDescription)" -ForegroundColor Cyan
      Write-Host "    Status: $($interface.Status)" -ForegroundColor Cyan
      
      # Get IP configuration
      $ipConfig = Get-NetIPAddress -InterfaceAlias $interface.Name -AddressFamily IPv4 -ErrorAction SilentlyContinue
      if ($ipConfig) {
        Write-Host "    IP: $($ipConfig.IPAddress)/$($ipConfig.PrefixLength)" -ForegroundColor Cyan
      }
      
      # Get gateway
      $route = Get-NetRoute -InterfaceAlias $interface.Name -DestinationPrefix "0.0.0.0/0" -ErrorAction SilentlyContinue
      if ($route) {
        Write-Host "    Gateway: $($route.NextHop)" -ForegroundColor Cyan
      }
    }
    
    Write-Host "`n=== Configuration Complete ===" -ForegroundColor Green